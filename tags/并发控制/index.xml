<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并发控制 on hwy的小窝</title><link>https://baymaxhwy.github.io/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><description>Recent content in 并发控制 on hwy的小窝</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://baymaxhwy.github.io/tags/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解 MVCC</title><link>https://baymaxhwy.github.io/2023/mvcc/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><guid>https://baymaxhwy.github.io/2023/mvcc/</guid><description>前言 印象中第一次看见 MVCC 是在《DDIA》这本书上，书中 MVCC 是作为解决 Non-repeatable Read 问题的解决方法提出的，当时觉得非常nb，但是现在细想来其实对其中的实现细节并不清晰，如果让我来实现一个 MVCC 无从下手。而且既然 MVCC 可以解决 Non-repeatable Read 问题，那它能不能解决其他隔离性的问题？如何做到？最近阅读到了《An Empirical Evaluation of In-Memory Multi-Version Concurrency Control》这篇论文对 MVCC 的实现有了更深入的了解，这篇文章就是我结合论文和自己的一些理解来尝试剖析一下 MVCC。
MVCC 简介 Multi-Version concurrency control(MVCC) 从名字上看就是一种并发控制算法用以控制并发读写单一对象时的行为，尽可能减少竞争并保证一定隔离性。实现的基本原理是同时维护同一个逻辑对象（Logical Object） 不同时间段的逻辑对象，而一个逻辑对象在某个时间段的数据被称为一个 Version ，当对一个对象进行读/写操作时会根据相应的规则返回特定的 Version ，如果对某个对象完成了更新操作并不会直接将更新应用在其访问的 Version 对象上，而且重新创建一个新 Version 对象。
MVCC 实现 在论文中将 MVCC 的关键组件分为四个：Protocol、Version Storage、GC（Garbage Collection）和 Index，而 MVCC 所管理的逻辑对象可以是一个事务（Transactions）或者数据表的一行数据（Tuple/Record），一般都是以 tuple 为操作对象，下面都以 tuple 来介绍。tuple 的存储格式如下（不同 protocol 会有所区别） 1. Protocol MVTO（Timestamp Ordering） MVTO 为每个事务分配一个唯一的时间戳($T_{id}$)，它会中止所有试图读/更新已经被设置 write lock 的 version tuple（当 txn-id 不等于 0 或者自己的 $T_{id}$ 时表示有其他事务持有 write lock）的事务。MVTO 协议的 tuple header 如下： 对 tuple A 进行读操作： a.</description></item></channel></rss>